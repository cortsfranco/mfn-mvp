"""
Ejemplo de uso de los clientes de Azure para el patr√≥n RAG
Este archivo muestra c√≥mo usar todos los clientes y helpers de Azure
"""

import asyncio
from typing import Dict, Any, List
from app.config.settings import settings
from app.utils.azure_clients import (
    get_openai_client,
    get_openai_embeddings_client,
    get_search_client,
    get_doc_intelligence_client,
    get_blob_service_client,
    validate_all_clients
)
from app.utils.azure_helpers import (
    storage_helper,
    search_helper,
    doc_intelligence_helper
)
from app.utils.logger import get_logger

logger = get_logger(__name__)

async def example_validate_configuration():
    """Ejemplo: Validar que todas las configuraciones est√©n correctas"""
    try:
        logger.info("üîç Validando configuraci√≥n de Azure...")
        
        # Validar configuraciones
        settings.validate()
        
        # Validar clientes
        validate_all_clients()
        
        logger.info("‚úÖ Configuraci√≥n validada correctamente")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en validaci√≥n: {str(e)}")
        return False

async def example_document_processing():
    """Ejemplo: Procesar un documento completo con RAG"""
    try:
        logger.info("üìÑ Procesando documento con RAG...")
        
        # 1. Simular documento (en producci√≥n vendr√≠a de una petici√≥n)
        document_content = """
        La inteligencia artificial (IA) es una rama de la inform√°tica que busca crear 
        sistemas capaces de realizar tareas que normalmente requieren inteligencia humana. 
        Estas tareas incluyen el aprendizaje, el razonamiento, la percepci√≥n y la resoluci√≥n de problemas.
        
        El machine learning es un subconjunto de la IA que se enfoca en el desarrollo de 
        algoritmos que pueden aprender y hacer predicciones bas√°ndose en datos.
        """
        
        # 2. Subir documento a Azure Storage
        document_name = "ai_document.txt"
        success = await storage_helper.upload_blob(
            blob_name=document_name,
            data=document_content.encode('utf-8')
        )
        
        if not success:
            raise Exception("Error subiendo documento a Storage")
        
        logger.info(f"üì§ Documento subido: {document_name}")
        
        # 3. Extraer texto con Document Intelligence (simulado)
        # En producci√≥n, esto procesar√≠a un PDF o imagen real
        extracted_text = document_content  # Simulado
        
        # 4. Crear embeddings del texto
        embeddings_client = get_openai_embeddings_client()
        embeddings = await embeddings_client.aembed_query(extracted_text)
        
        logger.info(f"üî¢ Embeddings generados: {len(embeddings)} dimensiones")
        
        # 5. Crear documento para el √≠ndice de b√∫squeda
        search_document = {
            "id": document_name,
            "content": extracted_text,
            "contentVector": embeddings,
            "metadata": {
                "source": "example",
                "type": "text",
                "uploaded_at": "2024-01-01T00:00:00Z"
            }
        }
        
        # 6. Subir al √≠ndice de b√∫squeda
        success = await search_helper.upload_document(search_document)
        
        if not success:
            raise Exception("Error subiendo documento al √≠ndice")
        
        logger.info("üìä Documento indexado en Azure Search")
        
        return {
            "document_name": document_name,
            "embeddings_dimensions": len(embeddings),
            "content_length": len(extracted_text)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error procesando documento: {str(e)}")
        raise

async def example_rag_query():
    """Ejemplo: Realizar una consulta RAG"""
    try:
        logger.info("üîç Realizando consulta RAG...")
        
        # 1. Consulta del usuario
        user_query = "¬øQu√© es la inteligencia artificial?"
        
        # 2. Generar embeddings de la consulta
        embeddings_client = get_openai_embeddings_client()
        query_embeddings = await embeddings_client.aembed_query(user_query)
        
        # 3. Buscar documentos similares
        # En producci√≥n, usar√≠as b√∫squeda vectorial
        search_results = await search_helper.search_documents(
            query=user_query,
            top=3
        )
        
        logger.info(f"üìö Documentos encontrados: {len(search_results)}")
        
        # 4. Construir contexto con los documentos encontrados
        context = ""
        for i, doc in enumerate(search_results, 1):
            context += f"Documento {i}:\n{doc.get('content', '')}\n\n"
        
        # 5. Generar respuesta usando OpenAI
        openai_client = get_openai_client()
        
        prompt = f"""
        Bas√°ndote en el siguiente contexto, responde la pregunta del usuario.
        
        Contexto:
        {context}
        
        Pregunta: {user_query}
        
        Respuesta:
        """
        
        response = await openai_client.ainvoke(prompt)
        
        logger.info("ü§ñ Respuesta generada con RAG")
        
        return {
            "query": user_query,
            "documents_found": len(search_results),
            "response": response.content,
            "context_length": len(context)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error en consulta RAG: {str(e)}")
        raise

async def example_list_storage_contents():
    """Ejemplo: Listar contenido del storage"""
    try:
        logger.info("üìÅ Listando contenido del storage...")
        
        blobs = await storage_helper.list_blobs()
        
        logger.info(f"üìã Encontrados {len(blobs)} blobs en el storage")
        
        for blob in blobs:
            logger.info(f"  - {blob}")
        
        return blobs
        
    except Exception as e:
        logger.error(f"‚ùå Error listando storage: {str(e)}")
        raise

async def main():
    """Funci√≥n principal que ejecuta todos los ejemplos"""
    try:
        logger.info("üöÄ Iniciando ejemplos de uso de Azure AI...")
        
        # 1. Validar configuraci√≥n
        if not await example_validate_configuration():
            logger.error("‚ùå Configuraci√≥n inv√°lida, abortando...")
            return
        
        # 2. Procesar documento
        doc_result = await example_document_processing()
        logger.info(f"‚úÖ Documento procesado: {doc_result}")
        
        # 3. Realizar consulta RAG
        rag_result = await example_rag_query()
        logger.info(f"‚úÖ Consulta RAG completada: {rag_result}")
        
        # 4. Listar contenido del storage
        storage_contents = await example_list_storage_contents()
        logger.info(f"‚úÖ Storage listado: {len(storage_contents)} elementos")
        
        logger.info("üéâ Todos los ejemplos completados exitosamente!")
        
    except Exception as e:
        logger.error(f"‚ùå Error en ejemplos: {str(e)}")

if __name__ == "__main__":
    # Ejecutar ejemplos
    asyncio.run(main())
